<?php

/**
 * Implements hook_requirements().
 */
function edit_requirements($phase) {
  $requirements = array();

  if ($phase == 'runtime') {
    // Check for the libraries module.
    if (!module_exists('libraries')) {
      $requirements['edit_libraries'] = array(
        'title' => t('Edit: Libraries module'),
        'value' => t('Libraries module is missing. Version 2.x or higher is required. Please check your version if you are experiencing trouble with the Edit module.'),
        'severity' => REQUIREMENT_ERROR,
      );
    }
    $requirements['edit_libraries_backbone'] = array(
      'title' => t('Edit: Backbone library'),
      'value' => t('The Backbone library is not present'),
      'severity' => REQUIREMENT_ERROR,
    );
    $requirements['edit_libraries_underscore'] = array(
      'title' => t('Edit: Underscore library'),
      'value' => t('The Underscore library is not present'),
      'severity' => REQUIREMENT_ERROR,
    );

    if (function_exists('libraries_get_path')) {
      // Check for Underscore.
      $path = libraries_get_path('underscore');
      if (!empty($path) && file_exists($path . '/underscore-min.js')) {
        $underscore_js = file_get_contents($path . '/underscore-min.js');
        $underscore_version = NULL;
        $matches = array();
        if (preg_match('#VERSION *\W *[\'\"]{1}(.*?)[\'\"]{1}#', $underscore_js, $matches)) {
          $underscore_version = $matches[1];
        }
        if (version_compare($underscore_version, '1.5.0') == -1) {
          $requirements['edit_libraries_underscore']['value'] = t('The Underscore library is too old, please update to 1.5.0 or newer!');
          $requirements['edit_libraries_underscore']['severity'] = REQUIREMENT_ERROR;
        }
        else {
          $requirements['edit_libraries_underscore']['value'] = t('Exists & compatible');
          $requirements['edit_libraries_underscore']['severity'] = REQUIREMENT_OK;
        }
      }
      // Check for Backbone.
      $path = libraries_get_path('backbone');
      if (!empty($path) && file_exists($path . '/backbone-min.js')) {
        $bb_js = file_get_contents($path . '/backbone-min.js');
        $bb_version = NULL;
        $matches = array();
        if (preg_match('#VERSION *\W *[\'\"]{1}(.*?)[\'\"]{1}#', $bb_js, $matches)) {
          $bb_version = $matches[1];
        }
        if (version_compare($bb_version, '1.0.0') == -1) {
          $requirements['edit_libraries_backbone']['value'] = t('The Backbone library is too old, please update to 1.0.0 or newer!');
          $requirements['edit_libraries_backbone']['severity'] = REQUIREMENT_ERROR;
        }
        else {
          $requirements['edit_libraries_backbone']['value'] = t('Exists & compatible');
          $requirements['edit_libraries_backbone']['severity'] = REQUIREMENT_OK;
        }
      }
    }

    if (module_exists('ckeditor')) {
      $requirements['edit_libraries_ckeditor'] = array(
        'title' => t('Edit: CKEditor library'),
        'value' => t('Exists, compatible and correct location'),
        'severity' => REQUIREMENT_OK,
      );

      $ckeditor_version = _ckeditor_requirements_getinstalledversion();
      if (version_compare($ckeditor_version, '4.2.0') == -1) {
        $requirements['edit_libraries_ckeditor']['value'] = t('The CKEditor library is too old, please update to 4.2 or newer!');
        $requirements['edit_libraries_ckeditor']['severity'] = REQUIREMENT_ERROR;
      }
      if ($ckeditor_version == '%VERSION%') {
        $requirements['edit_libraries_ckeditor']['value'] = t('Exists, but is a development version');
        $requirements['edit_libraries_ckeditor']['description'] = t('You are using the source version of CKEditor <strong>at your own risk</strong>, in case of using an outdated version some things may not work as expected. The latest stable version of CKEditor (an optimized release version) is recommended.');
        $requirements['edit_libraries_ckeditor']['severity'] = REQUIREMENT_WARNING;
      }

      if (!libraries_get_path('ckeditor')) {
        $requirements['edit_libraries_ckeditor']['value'] = t('Install the CKEditor library in a standard location. (!doc)', array('!doc' => l(t('Documentation'), 'https://drupal.org/node/1440066', array('external' => TRUE))));
        $requirements['edit_libraries_ckeditor']['severity'] = REQUIREMENT_ERROR;
      }

      $ckeditor_js = file_get_contents(libraries_get_path('ckeditor') . '/ckeditor.js');

      // Without the "Shared Space" plugin, Edit cannot nicely integrate
      // CKEditor into in-place editing.
      $requirements['edit_libraries_ckeditor_sharedspace'] = array(
        'title' => t('Edit: CKEditor\'s "Shared Space" plugin is included'),
        'value' => t('<a href="!sharedspace-url">"Shared Space"</a> CKEditor plugin missing', array('!sharedspace-url' => 'http://ckeditor.com/addon/sharedspace')),
        'description' => t('This plugin is essential for CKEditor to work with in-place editing.<br>Please <a href="!builder-url">create a custom build</a> of CKEditor that includes this plugin.', array('!builder-url' => 'http://ckeditor.com/builder')),
        'severity' => REQUIREMENT_ERROR,
      );
      if (FALSE !== strpos($ckeditor_js, 'CKEDITOR.plugins.add("sharedspace"')) {
        $requirements['edit_libraries_ckeditor_sharedspace']['value'] = t('Included');
        $requirements['edit_libraries_ckeditor_sharedspace']['severity'] = REQUIREMENT_OK;
        unset($requirements['edit_libraries_ckeditor_sharedspace']['description']);
      }

      // If the "Source" button is used in any of the CKEditor "profiles", then
      // also ensure that the "Source Dialog" plugin is available, because it
      // will be necessary for in-place editing.
      module_load_include('inc', 'ckeditor', 'includes/ckeditor.admin');
      $source_button_found = FALSE;
      $profiles = ckeditor_profiles_compile();
      foreach ($profiles as $format => $profile) {
        if (FALSE !== strpos($profile['toolbar'], "'Source'")) {
          $source_button_found = TRUE;
        }
      }
      if ($source_button_found) {
        $requirements['edit_libraries_ckeditor_sourcedialog'] = array(
          'title' => t('Edit: CKEditor\'s "Source" button is used'),
          'value' => t('<a href="!sourcedialog-url">"Source Dialog"</a> CKEditor plugin missing', array('!sourcedialog-url' => 'http://ckeditor.com/addon/sourcedialog')),
          'description' => t('This plugin is necessary to keep the "edit source" functionality while in-place editing.<br>Please <a href="!builder-url">create a custom build</a> of CKEditor that includes this plugin.', array('!builder-url' => 'http://ckeditor.com/builder')),
          'severity' => REQUIREMENT_ERROR,
        );
        if (FALSE !== strpos($ckeditor_js, 'CKEDITOR.plugins.add("sourcedialog"')) {
          $requirements['edit_libraries_ckeditor_sourcedialog']['value'] = t('"Source Dialog" CKEditor plugin included');
          $requirements['edit_libraries_ckeditor_sourcedialog']['severity'] = REQUIREMENT_OK;
          unset($requirements['edit_libraries_ckeditor_sourcedialog']['description']);
        }
      }
    }

    // Best-effort check that the theme is compatible.
    $query = new EntityFieldQuery();
    $query
      ->entityCondition('entity_type', 'node')
      ->propertyCondition('status', 1)
      ->range(0, 1);
    $result = $query->execute();
    if (isset($result['node'])) {
      $requirements['edit_theme'] = array(
        'title' => t('Edit: theme compatibility'),
        'value' => t('The theme appears compatible'),
        'severity' => REQUIREMENT_OK,
      );

      // Request the first published node's HTML.
      $node_ids = array_keys($result['node']);
      $node_id = $node_ids[0];
      $response = drupal_http_request(url('node/' . $node_id, array('absolute' => TRUE)));

      // Check whether a "content-region" class exists in the HTML.
      $dom = new \DOMDocument();
      @$dom->loadHTML($response->data);
      $xpath = new \DOMXPath($dom);

      $errors = array();

      // There should be at least one DOM element with a data-edit-entity-id
      // attribute that begins with "node/<node ID>". "at least one" because
      // there may be multiple entities on this page.
      if ($xpath->query("//*[starts-with(@data-edit-entity-id, 'node/" . $node_id . "')]")->length == 0) {
        $errors[] = t("Edit's attributes on entities are missing");
      }

      // There should be at least as many DOM elements with a data-edit-field-id
      // attribute that begin with "node/<node ID>" as there are visible fields
      // in the default view mode. "at least as many", because it is impossible
      // for code to know whether the "date" and "author" fields are visible,
      // but also because there may be multiple entities on the page.
      $bundle = $result['node'][$node_id]->type;
      $instances = field_info_instances('node', $bundle);
      $visible_field_count = 0;
      foreach ($instances as $instance) {
        if ($instance['display']['default']['type'] != 'hidden') {
          $visible_field_count++;
        }
      }
      $node_type = node_type_get_type($bundle);
      if ($node_type->has_title) {
        $visible_field_count++;
      }
      if ($xpath->query("//*[starts-with(@data-edit-field-id, 'node/" . $node_id . "')]")->length < $visible_field_count) {
        $errors[] = t("Edit's attributes on fields are missing");
      }

      // The "content" region must be identifiable through a class.
      // See http://stackoverflow.com/a/6366390/80305.
      if ($xpath->query("//*[contains(concat(' ', normalize-space(@class), ' '), ' region-content ')]")->length == 0) {
        $errors[] = t('The content region class is missing');
      }

      if ($errors) {
        $requirements['edit_theme']['value'] = theme('item_list', array('items' => $errors));
        $requirements['edit_theme']['severity'] = REQUIREMENT_ERROR;
      }
    }
  }

  return $requirements;
}
